/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.27
 * Generated at: 2015-10-14 14:22:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.upload;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import empty.User;

public final class updateheadimg_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("empty.User");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("\t<meta charset=\"UTF-8\">\n");
      out.write("\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"> \n");
      out.write("\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("\t<title>请上传您的头像</title>\n");
      out.write("\t<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("\t<link rel=\"stylesheet\" type=\"text/css\" href=\"css/default.css\">\n");
      out.write("\t<!--[if IE]>\n");
      out.write("\t\t<script src=\"http://libs.useso.com/js/html5shiv/3.7/html5shiv.min.js\"></script>\n");
      out.write("\t<![endif]-->\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<!-- java start -->\n");

	User user = null;
	if(session.getAttribute("user")!=null){
		user = (User)session.getAttribute("user");
	}
	String uploadimgmsg = "";
	String uploadfilename = "";
	if(request.getParameter("ilr")!=null && request.getParameter("fn")!=null){
		uploadimgmsg = request.getParameter("ilr");
	}

      out.write("\n");
      out.write("<!-- java end -->\n");
      out.write("\t<div class=\"htmleaf-container\">\n");
      out.write("\t");
if(user != null){ 
      out.write("\n");
      out.write("\t\t<header class=\"htmleaf-header\">\n");
      out.write("\t\t\t<h1>请上传您的头像 (仅仅支持 jpg, png, gif 合适的图片) <span>Please upload your avatar (only JPG, PNG, GIF)</span></h1>\t\t\t\n");
      out.write("\t\t\t<a href=\"/myblog/jsp/nav/index.jsp\"><h2>返回博客主页</h2></a>\t\n");
      out.write("\t\t</header>\n");
      out.write("\t\t<!--<div class=\"htmleaf-content bgcolor-8\">\n");
      out.write("\t\t</div>-->\n");
      out.write("\t\t<div class=\"container kv-main\">\n");
      out.write("            <div class=\"page-header\">\n");
      out.write("            <h3>请点击\"选择文件\" , 选中您想上传的图片 , 点击\"确定上传\"<small></h3>\n");
      out.write("            <h4 style=\"color:#FF0000\">只能添加一张图片,且大小不能超过1M</h4>\n");
      out.write("            <h4 style=\"color:#FF0000\">所选择的图片越接近正方形,显示的效果越好.</h4>\n");
      out.write("            </div>\n");
      out.write("            <form enctype=\"multipart/form-data\" action=\"/myblog/UpdateHeadImg?userid=");
      out.print(user.getUser_id());
      out.write("\" method=\"post\">\n");
      out.write("               \t\t<input style=\"width: 100%;\" name=\"myfile\" type=\"file\"/>\n");
      out.write("                 <input type=\"submit\" style=\"width: 100%;\" name=\"fileupload\" value =\"确定上传\"class=\" uploadbtn btn btn-success input_buttons_submit\"/>\n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("\t</div>\n");
      out.write("\t");
}else{ 
      out.write("\n");
      out.write("\t<h1>请先进行用户登陆</h1>\t\n");
      out.write("\t<a href=\"/myblog/jsp/nav/index.jsp\"><h2>返回博客主页</h2></a>\t\n");
      out.write("\t");
} 
      out.write("\n");
      out.write("\t<script src=\"http://libs.useso.com/js/jquery/2.1.1/jquery.min.js\"></script>\n");
      out.write("    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\" type=\"text/javascript\"></script>\n");
      out.write("    <script>\n");
      out.write("    \tvar errmsg = '");
      out.print(uploadimgmsg);
      out.write("';\n");
      out.write("    \tvar altmsg = \"\";\n");
      out.write("    \t/*\n");
      out.write("\t\t * 1:上传成功\n");
      out.write("\t\t * 2:上传失败\n");
      out.write("\t\t * 2.1:上传失败,格式不正确\n");
      out.write("\t\t * 2.2:上传失败,大小超过1M\n");
      out.write("\t\t * 3:上传失败,已经有该文件\n");
      out.write("\t\t * 4:用户未登录\n");
      out.write("\t\t * 5:执行sql失败\n");
      out.write("\t\t */\n");
      out.write("\n");
      out.write("    \tif(errmsg != \"\"){\n");
      out.write("    \t\tif(errmsg == \"1\"){\n");
      out.write("    \t\t\taltmsg = \"上传成功, 请您单击'返回微博主页'进行返回\";\n");
      out.write("    \t\t}else if(errmsg == \"2\"){\n");
      out.write("    \t\t\taltmsg = \"上传失败\";\n");
      out.write("    \t\t}else if(errmsg == \"2.1\"){\n");
      out.write("    \t\t\taltmsg = \"上传失败,格式不正确\";\n");
      out.write("    \t\t}else if(errmsg == \"2.2\"){\n");
      out.write("    \t\t\taltmsg = \"上传失败,大小超过1M\";\n");
      out.write("    \t\t}else if(errmsg == \"3\"){\n");
      out.write("    \t\t\taltmsg = \"上传失败,已经有该文件\";\n");
      out.write("    \t\t}else if(errmsg == \"4\"){\n");
      out.write("    \t\t\taltmsg = \"用户未登录\";\n");
      out.write("    \t\t}else if(errmsg == \"5\"){\n");
      out.write("    \t\t\taltmsg = \"执行sql失败\";\n");
      out.write("    \t\t}\n");
      out.write("    \t\talert(altmsg);\n");
      out.write("    \t}\n");
      out.write("\t    \n");
      out.write("\t\t</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
